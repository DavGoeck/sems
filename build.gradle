plugins {
    id 'java'
    id 'application'
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

group = 'nodomain.easy'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.assertj:assertj-core:3.25.3'
    testImplementation 'org.mockito:mockito-core:3.12.4'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.1'
}


application {
    mainClass = 'nodomain.simple.Starter'
}

jar {
    manifest {
        attributes 'Main-Class': application.mainClass
    }
}

test {
    useJUnitPlatform()
}


task buildClient {
    doLast {
        exec {
            workingDir 'client'
            commandLine 'cmd', '/c', 'npm run build'
        }
    }
}

def replace(String pathOfReplacement, String toReplace) {
    String charset = "UTF-8";
    String replacement = new File(pathOfReplacement).getText(charset);
    boolean found = false;
    for (File file : new File(deploymentPath + '/heroku/sems/assets').listFiles()) {
        String oldText = file.getText(charset);
        if (oldText.contains(toReplace)) {
            found = true;
        }
        file.write(oldText.replace(toReplace, replacement), charset);
    }
    if (!found) {
        throw new RuntimeException("replace was not successful!");
    }
}

// login to heroku at first
task localDeploy {
    dependsOn(buildClient)
    doLast {
        delete deploymentPath + '/heroku/sems/assets'
        delete deploymentPath + '/heroku/sems/icon.png'
        delete deploymentPath + '/heroku/sems/index.html'
        copy {
            from 'client/dist'
            into deploymentPath + '/heroku/sems'
        }
        replace(deployReplacementAboutHeader, "marker-dr53hifhh4-about-header");
        replace(deployReplacementAboutBody, "marker-dr53hifhh4-about-body");
        replace(deployReplacementImpressumHeader, "marker-dr53hifhh4-impressum-header");
        replace(deployReplacementImpressumBody, "marker-dr53hifhh4-impressum-body");
    }
}

task publish {
    doLast {
        exec {
            workingDir deploymentPath + '/heroku/sems'
            commandLine 'cmd', '/c', 'git add .'
        }
        exec {
            workingDir deploymentPath + '/heroku/sems'
            commandLine 'cmd', '/c', 'git commit -am "deployment"'
        }
        exec {
            workingDir deploymentPath + '/heroku/sems'
            commandLine 'cmd', '/c', 'git push heroku main'
        }
    }
}